type QueryStatus = variant {
  Pending;
  Processing;
  Completed;
  Failed;
};

type ResearchQuery = record {
  id: text;
  user_id: text;
  question: text;
  timestamp: nat64;
  status: QueryStatus;
  ai_response: opt text;
  metadata: opt text;
};

type QueryRequest = record {
  question: text;
  user_id: text;
};

type QueryStats = record {
  total_queries: nat64;
  completed_queries: nat64;
  failed_queries: nat64;
  active_users: nat64;
};

type AIServiceConfig = record {
  endpoint: text;
  api_key: opt text;
  model: text;
  max_tokens: nat32;
  temperature: float32;
};

type CanisterConfig = record {
  ai_service: AIServiceConfig;
  allowed_origins: vec text;
  rate_limit_per_user: nat32;
};

type Result_1 = variant {
  Ok: ResearchQuery;
  Err: text;
};

type Result_2 = variant {
  Ok;
  Err: text;
};

service : {
  submit_query: (QueryRequest) -> (Result_1);
  get_query: (text) -> (opt ResearchQuery) query;
  get_user_queries: (text) -> (vec ResearchQuery) query;
  get_stats: () -> (QueryStats) query;
  set_ai_config: (AIServiceConfig) -> (Result_2);
  get_config: () -> (CanisterConfig) query;
}